addControl(
html = "<div style='align-items:center; text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>"
)
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='align-items:center;justify-content: center; text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>"
)
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
) %>%
htmlwidgets::onRender(
"
function(el, x) {
var mapTitle = document.getElementsByClassName('title')[0];
mapTitle.style.position = 'absolute';
mapTitle.style.top = '10px';
mapTitle.style.left = '50%';
mapTitle.style.transform = 'translateX(-50%)';
mapTitle.style.zIndex = '1000';
mapTitle.style.width = 'auto';
}
"
)
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
) %>%
htmlwidgets::onRender(
"
function(el, x) {
var mapTitle = document.getElementsByClassName('title')[0];
mapTitle.style.position = 'absolute';
mapTitle.style.justify-content="center";
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
) %>%
htmlwidgets::onRender(
"
function(el, x) {
var mapTitle = document.getElementsByClassName('title')[0];
mapTitle.style.position = 'absolute';
mapTitle.style.justify-content='center';
# mapTitle.style.top = '10px';
# mapTitle.style.left = '50%';
# mapTitle.style.transform = 'translateX(-50%)';
# mapTitle.style.zIndex = '1000';
# mapTitle.style.width = 'auto';
}
"
)
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
) %>%
htmlwidgets::onRender(
"
function(el, x) {
var mapTitle = document.getElementsByClassName('title')[0];
mapTitle.style.position = 'absolute';
mapTitle.style.justify-content='center';
mapTitle.style.align-items= 'center';
# mapTitle.style.top = '10px';
# mapTitle.style.left = '50%';
# mapTitle.style.transform = 'translateX(-50%)';
# mapTitle.style.zIndex = '1000';
# mapTitle.style.width = 'auto';
}
"
)
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
) %>%
htmlwidgets::onRender(
"
function(el, x) {
var mapTitle = document.getElementsByClassName('title')[0];
mapTitle.style.position = 'absolute';
mapTitle.style.justify-content='center';
mapTitle.style.align-items= 'center';
mapTitle.style.display=flex;
# mapTitle.style.top = '10px';
# mapTitle.style.left = '50%';
# mapTitle.style.transform = 'translateX(-50%)';
# mapTitle.style.zIndex = '1000';
# mapTitle.style.width = 'auto';
}
"
)
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 8) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
basemap
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 9) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
basemap
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright") %>%
addControl(
html = "<div style='text-align:center; width: 100%;'>
<h2 style='color:darkblue;'>Designated Shellfish Growing Areas</h2>
</div>",
position = 'topleft',
className = 'title'
)
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 8) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\Lab05\\dsga\\index.html", selfcontained = TRUE)
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\Lab05\\dsga\\index.html", selfcontained = TRUE)
final_map = basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\Lab05\\dsga\\index.html", selfcontained = TRUE)
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Labs\\Lab05\\index.html", selfcontained = TRUE)
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 12) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
basemap
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 12) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
palette_pts <- colorFactor(palette = mpalette, domain = tf_dsga$CLASS)
labels <- sprintf(
"<strong>Class: %s</strong><br/>Begin Date: %s",
tf_dsga$CLASS, tf_dsga$BEGIN_DATE
) %>% lapply(htmltools::HTML)
final_map = basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Labs\\Lab05\\index.html", selfcontained = TRUE)
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 10) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
palette_pts <- colorFactor(palette = mpalette, domain = tf_dsga$CLASS)
labels <- sprintf(
"<strong>Class: %s</strong><br/>Begin Date: %s",
tf_dsga$CLASS, tf_dsga$BEGIN_DATE
) %>% lapply(htmltools::HTML)
final_map = basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Labs\\Lab05\\index.html", selfcontained = TRUE)
basemap = leaflet() %>%
addProviderTiles(
"OpenStreetMap",
# give the layer a name
group = "Open Street"
) %>%
addProviderTiles(
"CartoDB.Positron",
group = "CartoDB"
)  %>%
setView(lng = -70.7606, lat = 42.2057, zoom = 9) %>%
addLayersControl(baseGroups = c("OpenStreetMap","CartoDB"),
position = 'topleft')
palette_pts <- colorFactor(palette = mpalette, domain = tf_dsga$CLASS)
labels <- sprintf(
"<strong>Class: %s</strong><br/>Begin Date: %s",
tf_dsga$CLASS, tf_dsga$BEGIN_DATE
) %>% lapply(htmltools::HTML)
final_map = basemap %>% addPolygons(
data = tf_dsga,
fillColor = ~palette_pts(CLASS),  # Color based on the 'category' column
color = "white",
fillOpacity = 0.8,           # Adjust opacity
label =  labels,
weight = 1,
highlightOptions = highlightOptions(
weight = 5,
color = '#666',
bringToFront = TRUE),
group = 'DSGA')  %>%
addLegend(data = tf_dsga,
position = "bottomleft",
pal = palette_pts,
values = ~CLASS,
title = "Class",
opacity = 1) %>%
addLayersControl(baseGroups = c("CartoDB", "Open Street"), overlayGroups = c("DSGA"),
position = "topright")
library(htmlwidgets)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Labs\\Lab05\\index.html", selfcontained = TRUE)
saveWidget(final_map, "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Labs\\Lab05\\index.html", selfcontained = FALSE)
packageVersion('cachem')
update.packages('cachem')
install.packages('cachem')
shiny::runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/GIS_shiny')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
runApp('F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab')
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
install.packages(c("shinylive", "httpuv"))
getwd()
setwd("F:/Clark_Universiy/Clark_Teaching/Git_Repo/ssj-30262/docs/Lectures/Week07_shiny/Lab")
shinylive::export(appdir = "Lab", destdir = "docs")
shinylive::export(appdir = "./Lab", destdir = "docs")
shinylive::export(appdir = ".b", destdir = "docs")
shinylive::export(appdir = ".", destdir = "docs")
getwd()
getwd()
setwd("F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week07_shiny\\Lab")
shinylive::export(appdir = ".", destdir = "docs")
path = "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week07_shiny\\Lab"
path = "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week07_shiny\\Lab"
shinylive::export(appdir = "path", destdir = "docs")
path = "F:\\Clark_Universiy\\Clark_Teaching\\Git_Repo\\ssj-30262\\docs\\Lectures\\Week07_shiny\\Lab"
shinylive::export(appdir = path, destdir = "docs")
shiny::runApp()
